use serde::{Deserialize, Serialize};

/// Stores currency formatting metadata for a specific locale (e.g., "en-US").
///
/// This struct holds the rules for displaying monetary values according to
/// regional conventions. Instances are typically generated by the build script
/// from `data/locales.json` and accessed via the `LOCALES` map.
#[derive(Debug, PartialEq, Eq, Clone, Serialize, Deserialize)]
pub struct Locale {
    /// The character used to separate groups of digits (e.g., thousands separator).
    /// Note: This is stored as a String to handle multi-byte characters or potential future needs,
    /// but often represents a single char like ',' or '.'.
    pub digit_separator: String,

    /// The character used as the decimal separator.
    /// Note: Stored as String, often represents '.' or ','.
    pub exponent_separator: String,

    /// The primary grouping size for digits (e.g., 3 for thousands).
    pub grouping: u8,

    /// The string representation for infinity.
    pub infinity_symbol: String,

    /// The string representation for the minus sign.
    pub minus_sign_symbol: String,

    /// The string representation for "Not a Number".
    pub nan_symbol: String,

    /// Defines the pattern of digit grouping separators from right to left.
    /// e.g., `vec![3]` for standard thousands grouping (1,000,000).
    /// e.g., `vec![3, 2]` for Indian numbering system (1,00,000).
    /// The last element repeats indefinitely.
    pub separator_pattern: Vec<u8>,

    /// If `true`, the currency symbol is placed before the amount (e.g., "$100").
    /// If `false`, it's placed after (e.g., "100 â‚¬").
    pub symbol_first: bool,

    /// If `true`, a space is inserted between the currency symbol and the amount.
    pub symbol_spacing: bool,
}

// Example of how you might implement FromStr if needed, though direct lookup is preferred.
// impl FromStr for Locale {
//     type Err = crate::MoneyError; // Assuming MoneyError exists

//     fn from_str(s: &str) -> Result<Self, Self::Err> {
//         // Look up in the generated LOCALES map
//         crate::generated::LOCALES
//             .get(s)
//             .cloned() // Clone the Locale struct from the map
//             .ok_or(crate::MoneyError::InvalidLocale) // Define this error variant
//     }
// }

// Note: The LocalFormat struct and its impl block are removed as the
// Locale struct now directly contains the formatting information.
// The logic previously in LocalFormat::from_locale is now handled
// by the build script generating the LOCALES map.
// The logic previously in LocalFormat::digit_separator_pattern()
// can be accessed directly via `locale.separator_pattern`.
